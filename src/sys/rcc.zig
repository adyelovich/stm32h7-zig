const rwconfig = @import("bitutils.zig").rwconfig;

pub const Base = packed struct {
    CR: u32,
    HSICFGR: u32,
    CRRCR: u32,
    CSICFGR: u32,
    CFGR: u32,
    res0: u32,
    CDCFGR1: u32,
    CDCFGR2: u32,
    SRDCFGR: u32,
    res24: u32,
    PLLCKSELR: u32,
    PLLCFGR: u32,
    PLL1DIVR: u32,
    PLL1FRACR: u32,
    PLL2DIVR: u32,
    PLL2FRACR: u32,
    PLL3DIVR: u32,
    PLL3FRACR: u32,
    res1: u32,
    CDCCIPR: u32,
    CDCCIP1R: u32,
    CDCCIP2R: u32,
    SRDCCIPR: u32,
    res2: u32,
    CIER: u32,
    CIFR: u32,
    CICR: u32,
    res3: u32,
    BDCR: u32,
    CSR: u32,
    res4: u32,
    AHB3RSTR: u32,
    AHB1RSTR: u32,
    AHB2RSTR: u32,
    AHB4RSTR: u32,
    APB3RSTR: u32,
    APB1LRSTR: u32,
    APB1HRSTR: u32,
    APB2RSTR: u32,
    APB4RSTR: u32,
    resA0: u32,
    res5: u32,
    SRDAMR: u32,
    res6: u32,
    CKGAENR: u32,
    res7: u992,
    RSR: u32,
    AHB3ENR: u32,
    AHB1ENR: u32,
    AHB2ENR: u32,
    AHB4ENR: u32,
    APB3ENR: u32,
    APB1LENR: u32,
    APB1HENR: u32,
    APB2ENR: u32,
    APB4ENR: u32,
    res8: u32,
    AHB3LPENR: u32,
    AHB1LPENR: u32,
    AHB2LPENR: u32,
    AHB4LPENR: u32,
    APB3LPENR: u32,
    APB1LLPENR: u32,
    APB1HLPENR: u32,
    APB2LPENR: u32,
    APB4LPENR: u32,

    pub fn gpio_clk_on(self: *volatile Base, config: u10) void {
        _ = rwconfig(u32, &self.AHB4ENR, config, 1, 1);
    }

    pub fn gpio_clk_off(self: *volatile Base, config: u10) void {
        _ = rwconfig(u32, &self.AHB4ENR, config, 0, 1);
    }
};
